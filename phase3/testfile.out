Opening Scope
Create global scope
Opening Scope
Closing Scope
Return to parent scope
Define function f with type kind: 2 specifier: 285 indirection: 0

defineFunc(): symbol not in current scope
defineFunc(): symbol not in scope
name: f type: kind: 2 specifier: 285 indirection: 0


Declare variable x with type kind: 0 specifier: 285 indirection: 0

declareVar(): symbol not in current scope
declareVar(): symbol not in ANY scope
name: x type: kind: 0 specifier: 285 indirection: 0


declareVar(): symbol is void
Opening Scope
Declare variable y with type kind: 0 specifier: 285 indirection: 0

declareVar(): symbol not in current scope
declareVar(): symbol not in ANY scope
name: y type: kind: 0 specifier: 285 indirection: 0


declareVar(): symbol is void
declaring function
Closing Scope
Return to parent scope
Declare function g with type kind: 2 specifier: 285 indirection: 0

declareFunc(): symbol not in current scope
name: g type: kind: 2 specifier: 285 indirection: 0


Opening Scope
declaring function
Closing Scope
Return to parent scope
Declare function h with type kind: 2 specifier: 285 indirection: 1

declareFunc(): symbol not in current scope
name: h type: kind: 2 specifier: 285 indirection: 1


Closing Scope
Return to parent scope
